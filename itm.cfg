# Modify there to match your debugger hw & cpu
source [find interface/stlink.cfg]
source [find target/stm32f4x.cfg]

# Helper functions
proc setbits {ADDR MASK} {
   set data(0) 0 
   mem2array data 32 $ADDR 1
   set data(0) [expr $data(0) | $MASK]
   array2mem data 32 $ADDR 1
}

proc clearbits {ADDR MASK} {
   set data(0) 0 
   mem2array data 32 $ADDR 1
   set data(0) [expr $data(0) & ~$MASK]
   array2mem data 32 $ADDR 1
}

# Register addresses
set RCC_APB2ENR          0x40021018
set AFIO_MAPR            0x40010004
# Debug MCU configuration register
set DBGMCU_CR            0xe0042004
# Debud Exception and Monitor Control Register; we need to set the TRCENA bit to enable access to the TPIU
set COREDEBUG_DEMCR      0xe000edfc
# TPIU Acychronous Clock Prescaler Register
set TPI_ACPR             0xe0040010
# TPIO Selected Pin Protocol Register
set TPI_SPPR             0xe00400f0
# Formatter and flush control register
set TPI_FFCR             0xe0040304
# Device ID - if last bit is set, we have ETM enabled - Cortex M4 manual, page 106
set TPI_DEV_ID 0xE0040FC8
# Data Watchpoint and Trace Control Register - defined in ARMv7 Architecture Manual page 879
set DWT_CTRL             0xe0001000
# ITM Lock Access Register
set ITM_LAR              0xe0000fb0
# ITM Trace Control Register
set ITM_TCR              0xe0000e80
# ITM Trace Enable - Each bit corresponds to a stimulus port to enable
set ITM_TER              0xe0000e00
# ITM Trace Privilege Register - enabled various tracing ports
set ITM_TPR		 0xE0000E40
set ETM_LAR              0xe0041fb0
set ETM_CR               0xe0041000
set ETM_TRACEIDR         0xe0041200
set ETM_TECR1            0xe0041024
set ETM_FFRR             0xe0041028
set ETM_FFLR             0xe004102c


# Stop the CPU while we configure
init
halt

# Alternate function IO clock enable
#setbits $RCC_APB2ENR 1                     ;# AFIOEN
# Set SWG_CFG[2:0] bits to be 010 JTAG-DP Disabled and SW-DP Enabled
#setbits $AFIO_MAPR 0x2000000               ;# Disable JTAG
# TRACE_IOEN = 1 TRACE_MODE[1:0] = 0 - Asynchronous tracing on TRACESWO
setbits $DBGMCU_CR 0x20                    ;# Enable trace IO pins
# TPIU config
setbits $COREDEBUG_DEMCR 0x1000000         ;# Enable access to trace regs

# TPIO Asynchronous Clock Prescale Register - Prescaler value for SWO
# STM32F41 Has 16 MHz internal clock, found in ARMv7 Architecture manual
# 31 = ~480KHz
mww $TPI_ACPR 31                            ;# Trace clock divider HCLK/(x+1)
# TPIO Reg - Selected pin protocol
mww $TPI_SPPR 2                            ;# Pin protocol: 0 = Sync Trace Port Mode, 1 = NRZ, 2 =USART, 3 = Reserved
# TPIO Reg: Formatter and flush control
mww $TPI_FFCR 0x102                        ;# Enable TPIU framing (0x100 to disable)

# DWT config
# https://developer.arm.com/documentation/ddi0403/d/Debug-Architecture/ARMv7-M-Debug/The-Data-Watchpoint-and-Trace-unit/DWT-register-summary?lang=en
mww $DWT_CTRL 0x40011a01                   ;# 1/512 PC sampling, exc trace, this is determined by bit 12, see page 879 of armv7 reference manual, speed is handled by POSTCNT timer, when the timer fires, PC is sampled. It should be noted that these packets are NOT the same as the PC trace packets that are generated by the DWT comparators
# ITM Lock access register
mww $ITM_LAR 0xC5ACCE55
# ITM Trace Control Register
# 5 = Enable ITM and enable synchronization packet transmission
mww $ITM_TCR 0x0001000d                    ;# TraceBusID 1, enable dwt/itm/sync
# ITM Trace Enable Register
mww $ITM_TER 0xFFFFFFFF                    ;# Enable all stimulus ports
# Continue execution, instruction trace should be active
# NOTE: The lowest bit is not getting set for some reason. 
#mww 0xE0000000 0xFFFFFFFF
#mww 0xE0000000 0x41424344
#mww 0xE0000000 0xFFFFFFFF
#mww 0xE0000000 0x41424344
# ETM config
#mww $ETM_LAR 0xC5ACCE55
#setbits $ETM_CR 0x400                      ;# ETM programming mode
#mww $ETM_CR 0xd90                          ;# Stall processor, report all branches
#mww $ETM_TRACEIDR 2                        ;# TraceBusID 1
#mww $ETM_TECR1 0x1000000                   ;# Trace always enabled
#mww $ETM_FFRR 0x1000000                    ;# Stalling always enabled
#mww $ETM_FFLR 24                           ;# Stall when less than N bytes free in FIFO (1..24)
#mww 0xE0041020 0x6F
#clearbits $ETM_CR 0x400                  ;# Start tracing


resume
